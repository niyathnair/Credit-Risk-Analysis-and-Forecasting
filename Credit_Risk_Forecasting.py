# -*- coding: utf-8 -*-
"""Untitled51.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pzB22h2UXIKUQb_K8RfLUe-DN1vnN68P
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, RandomForestRegressor
from sklearn.metrics import roc_auc_score, classification_report, mean_squared_error, precision_recall_curve
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.pipeline import Pipeline
from statsmodels.tsa.statespace.sarimax import SARIMAX
import matplotlib.pyplot as plt
import seaborn as sns

loan_data = pd.read_csv('../data/loan_data.csv')
macro_data = pd.read_csv('../data/macro_data.csv')

loan_data.dropna(inplace=True)
loan_data['Debt_to_Income_Ratio'] = loan_data['Debt'] / loan_data['Income']
loan_data['Loan_to_Value_Ratio'] = loan_data['LoanAmount'] / loan_data['PropertyValue']
encoder = LabelEncoder()
loan_data['Employment_Status'] = encoder.fit_transform(loan_data['Employment_Status'])
macro_data['Date'] = pd.to_datetime(macro_data['Date'])
macro_data.set_index('Date', inplace=True)

features = ['CreditScore', 'Income', 'LoanAmount', 'Loan_to_Value_Ratio', 'Debt_to_Income_Ratio', 'Employment_Status']
X = loan_data[features]
y = loan_data['Default']
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Probability of Default (PD)
pipeline = Pipeline([
    ('classifier', GradientBoostingClassifier(random_state=42))
])
param_grid = {
    'classifier__n_estimators': [100, 200],
    'classifier__learning_rate': [0.01, 0.1],
    'classifier__max_depth': [3, 5]
}
clf = GridSearchCV(pipeline, param_grid, cv=5, scoring='roc_auc')
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
y_proba = clf.predict_proba(X_test)[:, 1]

print("Classification Report:\n", classification_report(y_test, y_pred))
print("ROC-AUC Score:", roc_auc_score(y_test, y_proba))
precision, recall, _ = precision_recall_curve(y_test, y_proba)
plt.figure(figsize=(8, 6))
plt.plot(recall, precision, label='Precision-Recall Curve')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.title('Precision-Recall Curve')
plt.legend()
plt.show()

# Loss Given Default (LGD)
lgd_features = ['LoanAmount', 'PropertyValue', 'Income', 'Debt']
X_lgd = loan_data[lgd_features]
y_lgd = loan_data['LossAmount'] / loan_data['LoanAmount']
X_lgd_train, X_lgd_test, y_lgd_train, y_lgd_test = train_test_split(X_lgd, y_lgd, test_size=0.3, random_state=42)
reg = RandomForestRegressor(random_state=42, n_estimators=200, max_depth=10)
reg.fit(X_lgd_train, y_lgd_train)
lgd_pred = reg.predict(X_lgd_test)
print("Mean Squared Error:", mean_squared_error(y_lgd_test, lgd_pred))

# Expected Credit Loss (ECL)
loan_data['PD'] = clf.best_estimator_.predict_proba(X_scaled)[:, 1]
loan_data['LGD'] = reg.predict(X_lgd)
loan_data['EAD'] = loan_data['LoanAmount']
loan_data['ECL'] = loan_data['PD'] * loan_data['LGD'] * loan_data['EAD']
print("Expected Credit Loss:\n", loan_data[['LoanID', 'ECL']].head())

# Financial Forecasting
default_rates = loan_data.groupby('OriginationDate')['Default'].mean()
default_rates.index = pd.to_datetime(default_rates.index)
default_rates = default_rates.sort_index()
model = SARIMAX(default_rates, order=(1, 1, 1), seasonal_order=(1, 0, 1, 12))
model_fit = model.fit(disp=False)
forecast = model_fit.get_forecast(steps=12)
forecast_index = pd.date_range(start=default_rates.index[-1], periods=12, freq='M')
forecast_values = forecast.predicted_mean
forecast_conf_int = forecast.conf_int()
plt.figure(figsize=(10, 6))
plt.plot(default_rates, label='Historical Default Rates', color='blue')
plt.plot(forecast_index, forecast_values, label='Forecasted Default Rates', linestyle='--', color='red')
plt.fill_between(forecast_index, forecast_conf_int.iloc[:, 0], forecast_conf_int.iloc[:, 1], color='pink', alpha=0.3)
plt.legend()
plt.title('Default Rate Forecast with SARIMA')
plt.xlabel('Date')
plt.ylabel('Default Rate')
plt.show()

sns.histplot(loan_data['ECL'], bins=30, kde=True, color='green')
plt.title('Distribution of Expected Credit Loss (ECL)')
plt.xlabel('ECL')
plt.ylabel('Frequency')
plt.show()

loan_data[['LoanID', 'PD', 'LGD', 'EAD', 'ECL']].to_csv('../results/credit_risk_report.csv', index=False)
print("Results saved to '../results/credit_risk_report.csv'.")